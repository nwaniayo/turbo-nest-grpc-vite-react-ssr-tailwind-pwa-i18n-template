/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst, 
  StaleWhileRevalidate 
} from 'workbox-strategies';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching.

precacheAndRoute(self.__WB_MANIFEST);

registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && (url.pathname.endsWith('.png') || url.pathname.endsWith('.jpg')|| url.pathname.endsWith('.svg')),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

//Pius included below for caching css and js not embedded in components
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && (url.pathname.endsWith('.min.css') || url.pathname.endsWith('.min.js')),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new CacheFirst({
    cacheName: 'nonbundledcssandjs',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);


//Pius included below for caching tenant info, status as well as logo, not embedded in components
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && (url.pathname.endsWith('/tenant-info-and-status') || url.pathname.endsWith('/logo')),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new CacheFirst({
    cacheName: 'tenantinfostatusandlogo',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

//Pius included below for product image download caching
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && (url.pathname.endsWith('/download') && url.pathname.includes('/product')),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'productimages',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

//TODO: Push notification.
self.addEventListener('push', event => {
  const data = event.data!.json()
  console.log('New notification', data)
  const options = {
    body: data.body,
  }
  event.waitUntil(
    self.registration.showNotification(data.title, options)
  );
})

//To listen for change and unsubscribe, if user changes previous permission
self.addEventListener("pushsubscriptionchange", (event: any) => {
  self.registration.pushManager
    .permissionState().then((state) => {
      if (state == 'denied') {
        //user denied access. Attempt to unsubscribe the user at the backend
          self.registration.pushManager.getSubscription().then((subscription) => {
            subscription?.unsubscribe().then((_successful) => {
              fetch(`/push-notifications/unsubscribe`, {
                method: "post",
                headers: {
                  "Content-type": "application/json",
                },
                body: JSON.stringify({
                  endpoint: subscription.endpoint,
                }),
              })
            })
        })
      } else {
        //renewsubscription. May have expired but not denied
        const subscription = self.registration.pushManager
          .subscribe(event.oldSubscription.options)
          .then((subscription) =>
            fetch(`/push-notifications/renew-subscription`, {
              method: "post",
              headers: {
                "Content-type": "application/json",
              },
              body: JSON.stringify(subscription),
            }),
          );
        event.waitUntil(subscription);
      }
    })
}, false);

// Any other custom service worker logic can go here.
